"use strict";(self.webpackChunkscribe=self.webpackChunkscribe||[]).push([[6218],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),p=o,f=m["".concat(c,".").concat(p)]||m[p]||u[p]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8744:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},assets:function(){return d},toc:function(){return u},default:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={sidebar_position:4},c="find Command",s={unversionedId:"cli-tool/find-command",id:"cli-tool/find-command",title:"find Command",description:"You can use the \u2018find\u2019 command to search for an existing SBOM, statement, or attestation either in the Scribe CLI default cache or in a path you specify.",source:"@site/docs/cli-tool/find-command.md",sourceDirName:"cli-tool",slug:"/cli-tool/find-command",permalink:"/docosaurus-scribe/docs/cli-tool/find-command",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli-tool/find-command.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"bom Command",permalink:"/docosaurus-scribe/docs/cli-tool/bom-command"},next:{title:"sign Command",permalink:"/docosaurus-scribe/docs/cli-tool/sign-command"}},d={},u=[],m={toc:u};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"find-command"},"find Command"),(0,a.kt)("p",null,"You can use the \u2018find\u2019 command to search for an existing SBOM, statement, or attestation either in the Scribe CLI default cache or in a path you specify.\nThe simplest way to use this command is:",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"scribe find alpine:latest"),"  - this command will look for the default SBOM (cyclonedx json) in the Scribe cache (by default /tmp/scribe unless you changed it using the -d global flag). Note that the find command doesn\u2019t externalize any information so if you want to verify what the find result was it\u2019s currently recommended to use the flag -v or -vv."),(0,a.kt)("p",null,"Just like the bom command, the find command can be used on a docker image from your own repo, a tarball from the disk or the OCI archives etc\u2019.  "),(0,a.kt)("p",null,"Here are some more examples:",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"scribe find yourrepo/yourimage:tag -vv")," - defaults to using images from a Docker daemon. If Docker is not present, the image is pulled directly from the registry."),(0,a.kt)("p",null,"You can also explicitly specify the scheme to use:",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"scribe find docker:yourrepo/yourimage:tag -vv")," - explicitly use the Docker daemon",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"scribe find docker-archive:path/to/yourimage.tar -vv"),' - use a tarball from disk for archives created from "docker save"',(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"scribe find oci-archive:path/to/yourimage.tar -vv")," - use a tarball from disk for OCI archives (from Skopeo or otherwise)",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"scribe find dir:path/to/yourproject -vv")," - read directly from a path on disk (any directory)",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"scribe find registry:yourrepo/yourimage:tag -vv")," - pull image directly from a registry (no container runtime required)",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"scribe find file:path/to/yourproject/file -vv")," - read directly from a path on disk (any single file)  "),(0,a.kt)("p",null,"Here are some flags relevant to the \u2018find\u2019 command."),(0,a.kt)("table",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"Short"),(0,a.kt)("th",{width:"18%"},"Full Flag"),(0,a.kt)("th",null,"Format"),(0,a.kt)("th",null,"Description")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"-a"),(0,a.kt)("td",null,"--all"),(0,a.kt)("td",null),(0,a.kt)("td",null,"Find all output types, SBOMs, statements, and attestations.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"-o"),(0,a.kt)("td",null,"--format"),(0,a.kt)("td",null,"string"),(0,a.kt)("td",null,'The format searched for. The options are cyclonedx-json, cyclonedx-xml, attest-cyclonedx-json, and statement-cyclonedx-json. The default is "cyclonedx-json".')),(0,a.kt)("tr",null,(0,a.kt)("td",null,"-h"),(0,a.kt)("td",null,"--help"),(0,a.kt)("td",null),(0,a.kt)("td",null,"Presents all the help information for the \u2018find\u2019 command."))))}p.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkscribe=self.webpackChunkscribe||[]).push([[8004],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(n),p=a,h=m["".concat(s,".").concat(p)]||m[p]||u[p]||r;return n?o.createElement(h,i(i({ref:t},d),{},{components:n})):o.createElement(h,i({ref:t},d))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},387:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},assets:function(){return d},toc:function(){return u},default:function(){return p}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],l={sidebar_position:3},s="bom Command",c={unversionedId:"cli-tool/bom-command",id:"cli-tool/bom-command",title:"bom Command",description:"The \u2018bom\u2019 command is used to create an SBOM, statement, or attestation of the directory or docker image it\u2019s targeting. Other than the command\u2019s target it can accept various flags.",source:"@site/docs/cli-tool/bom-command.md",sourceDirName:"cli-tool",slug:"/cli-tool/bom-command",permalink:"/docosaurus-scribe/docs/cli-tool/bom-command",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli-tool/bom-command.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Diving Deeper",permalink:"/docosaurus-scribe/docs/cli-tool/diving-deeper"},next:{title:"find Command",permalink:"/docosaurus-scribe/docs/cli-tool/find-command"}},d={},u=[],m={toc:u};function p(e){var t=e.components,l=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bom-command"},"bom Command"),(0,r.kt)("p",null,"The \u2018bom\u2019 command is used to create an SBOM, statement, or attestation of the directory or docker image it\u2019s targeting. Other than the command\u2019s target it can accept various flags."),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Short"),(0,r.kt)("th",{width:"18%"},"Full Flag"),(0,r.kt)("th",null,"Format"),(0,r.kt)("th",null,"Description")),(0,r.kt)("tr",null,(0,r.kt)("td",null),(0,r.kt)("td",null,"--components"),(0,r.kt)("td",null,"strings"),(0,r.kt)("td",null,"Select the SBOM components groups in an array format. The options include metadata, layers, packages, files, and dep. The default is all of them - [metadata,layers,packages,files,dep]. Unless you have a really good reason (like, you only want the SBOM\u2019s metadata) there is no reason to change this.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"-C"),(0,r.kt)("td",null,"--context-type"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,'The context of the Scribe CLI tool\u2019s run \u2013 what is the source of the tool. The current options are Jenkins, GitHub, and Local. The default is "Local" and it\u2019s added to the SBOM created.')),(0,r.kt)("tr",null,(0,r.kt)("td",null,"-e"),(0,r.kt)("td",null,"--env"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"Environment keys (custom envrionments names) you want to include in the SBOM.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"-f"),(0,r.kt)("td",null,"--force"),(0,r.kt)("td",null),(0,r.kt)("td",null,"Force an overwrite so that even if the destination (by default the cache) already includes an SBOM for the requested image or directory, bomber will still run and create a new SBOM.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"-o"),(0,r.kt)("td",null,"--format"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,'The SBOM\u2019s desired format. The options are cyclonedx-json, cyclonedx-xml, attest-cyclonedx-json, and statement-cyclonedx-json. The default is "cyclonedx-json".')),(0,r.kt)("tr",null,(0,r.kt)("td",null,"-n"),(0,r.kt)("td",null,"--name"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"A custom name to be added to the SBOM or project.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"-h"),(0,r.kt)("td",null,"--help"),(0,r.kt)("td",null),(0,r.kt)("td",null,"Present bom command help including all these flags."))),(0,r.kt)("p",null,"Here are some examples:\n",(0,r.kt)("inlineCode",{parentName:"p"},"scribe bom alpine:latest")," - create a default (cyclonedx json) SBOM from the docker image of alpine:latest.\n",(0,r.kt)("inlineCode",{parentName:"p"},"scribe bom alpine:latest -o cyclonedx-xml")," - create cyclonedx XML SBOM (the flag -o is used to change the default SBOM format) from the docker image of alpine:latest."),(0,r.kt)("p",null,"Instead of naming a docker hub image you can use a private image location like this:",(0,r.kt)("br",{parentName:"p"}),"\n","",(0,r.kt)("inlineCode",{parentName:"p"},"scribe bom yourrepo/yourimage:tag")," - Defaults to using images from a Docker daemon. If Docker is not present, the image is pulled directly from the registry."),(0,r.kt)("p",null,"You can also explicitly specify the scheme to use:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"scribe bom docker:yourrepo/yourimage:tag")," - Explicitly use the Docker daemon",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"scribe bom docker-archive:path/to/yourimage.tar"),' - Use a tarball from your local disk for archives created from "docker save"',(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"scribe bom oci-archive:path/to/yourimage.tar")," - Use a tarball from your local disk for OCI archives (for example: Skopeo)",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"scribe bom dir:path/to/yourproject")," - Read the image directly from a path on your local disk (any directory)",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"scribe bom registry:yourrepo/yourimage:tag"),"  - Pull image directly from a registry",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"scribe bom file:path/to/yourproject/file")," - Read directly from a path on disk (any single file)  "),(0,r.kt)("p",null,"Other than creating an SBOM you can use the bom command to create a statement or an attestation. An attestation is a ",(0,r.kt)("a",{href:"https://github.com/slsa-framework/slsa/blob/main/controls/attestations.md"},"specific format defined by the SLSA framework"),". It includes metadata (a statement) about a software artifact and is cryptographically signed to maintain its integrity. A bomber statement is created in the same format as an attestation, it\u2019s just missing the signature. "),(0,r.kt)("p",null,"Note that by default the resulting file (SBOM, statement, or attestation) will have the same name (the hash value of the image or directory targeted) and will differ only by the file\u2019s ending. An SBOM in the json format will have the .json ending. A statement will have the .json.statement ending and an attestation will have the .json.sig ending. Replace the .json with .xml for the xml format."),(0,r.kt)("p",null,"To change the result\u2018s format you can use the -o flag (see above).",(0,r.kt)("br",{parentName:"p"}),"\n","The command to create a CycloneDX JSON statement:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"scribe bom alpine:latest -o statement-cyclonedx-json")),(0,r.kt)("p",null,"The command to create a CycloneDX JSON attestation is very similar:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"scribe bom alpine:latest -o attest-cyclonedx-json")),(0,r.kt)("p",null,"This command both creates the SBOM and turns it into a signed attestation. Signing an existing statement is done using the \u2018sign\u2019 command and covered in that chapter. Note that in order to sign an attestation, by default Scribe's tool expects you to be online and it would use the library ",(0,r.kt)("a",{href:"https://github.com/sigstore"},"sigstore")," to get your credentials \u2013 either GitHub, Google or, Microsoft credentials. You would be requested to log in to Sigstore in order to successfully sign the attestation.\n",(0,r.kt)("img",{loading:"lazy",alt:"Sigstore link",src:n(1275).Z,width:"1804",height:"195"}),"  "),(0,r.kt)("img",{src:"../../img/cli/sigstore_login.png",alt:"Sigstore login",width:"600"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"Once you have logged in using your preferred method, you\u2019d receive a code representing your credentials that you need to copy to the CLI. "),(0,r.kt)("img",{src:"../../img/cli/sigstore_login_code.png",alt:"Sigstore login code",width:"350"}),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"lazy",alt:"Signing success",src:n(8683).Z,width:"1334",height:"132"}),"  "),(0,r.kt)("p",null,"The verification code created is a one-time use code so there is no need to save it."),(0,r.kt)("p",null,"You can change the default system used to sign statements using the configuration file. We\u2019ll cover that in a later segment."))}p.isMDXComponent=!0},8683:function(e,t,n){t.Z=n.p+"assets/images/sign_success-778470b8cb4c9ef3456ab439a87a3b2b.png"},1275:function(e,t,n){t.Z=n.p+"assets/images/sigstore_link-c4fb8e3ca0f35228f41af0610fa04f72.png"}}]);